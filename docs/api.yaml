openapi: 3.0.4
info:
  title: Pharmacy API
  description: API for managing pharmacy operations including users, products, suppliers, sales and authentication.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Authentication
    description: Endpoints for user authentication and registration
  - name: Users
    description: User management operations
  - name: Products
    description: Product management operations
  - name: Suppliers
    description: Supplier management operations
  - name: Sales
    description: Sales operations and transactions

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        password:
          type: string
          example: "********"
        status:
          type: boolean
          example: true
        role:
          type: string
          enum: [admin, user]
          example: "user"
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Aspirin"
        description:
          type: string
          example: "Pain relief medication"
        price:
          type: number
          example: 9.99
        stock:
          type: integer
          example: 100
        status:
          type: boolean
          example: true
        proveedor:
          $ref: '#/components/schemas/Supplier'
    Supplier:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Pharma Supply Co."
        email:
          type: string
          example: "contact@pharmasupplyco.com"
        phone:
          type: number
          example: 1234567890
        address:
          type: string
          example: "123 Pharma St, Health City"
    Sale:
      type: object
      properties:
        id:
          type: integer
          example: 1
        fecha_venta:
          type: string
          format: date-time
          example: "2025-10-27T10:00:00Z"
        total:
          type: number
          example: 99.99
        usuario:
          $ref: '#/components/schemas/User'
        detalles:
          type: array
          items:
            $ref: '#/components/schemas/SaleDetail'
    SaleDetail:
      type: object
      properties:
        id:
          type: integer
          example: 1
        cantidad:
          type: integer
          example: 2
        precio_unitario:
          type: number
          example: 9.99
        producto:
          $ref: '#/components/schemas/Product'

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get authenticated user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - Users
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
    delete:
      tags:
        - Users
      summary: Delete user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted

  /users/name/{name}:
    get:
      tags:
        - Users
      summary: Get user by name
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /products:
    get:
      tags:
        - Products
      summary: Get all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - Products
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
        - Products
      summary: Update product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated

  /products/by-name/{name}:
    get:
      tags:
        - Products
      summary: Get product by name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /suppliers:
    get:
      tags:
        - Suppliers
      summary: Get all suppliers
      responses:
        '200':
          description: List of suppliers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Supplier'
    post:
      tags:
        - Suppliers
      summary: Create a new supplier
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '201':
          description: Supplier created

  /suppliers/{id}:
    get:
      tags:
        - Suppliers
      summary: Get supplier by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Supplier found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
    put:
      tags:
        - Suppliers
      summary: Update supplier
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '200':
          description: Supplier updated
    delete:
      tags:
        - Suppliers
      summary: Delete supplier
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Supplier deleted

  /suppliers/{id}/productos:
    get:
      tags:
        - Suppliers
      summary: Get products by supplier
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /sales:
    post:
      tags:
        - Sales
      summary: Create a new sale
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
      responses:
        '201':
          description: Sale created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'